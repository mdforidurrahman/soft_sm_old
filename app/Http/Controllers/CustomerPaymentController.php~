<?php

namespace App\Http\Controllers;

use App\Models\Contact;
use App\Models\CustomerPayment;
use App\Models\Sell;
use App\Models\SellPayment;
use App\Models\Store;
use App\Services\SaleTransactionService;
use Barryvdh\DomPDF\Facade\Pdf;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class CustomerPaymentController extends Controller
{

	protected SaleTransactionService $transactionService;

	public function __construct(SaleTransactionService $transactionService) {
		$this->transactionService = $transactionService;
	}


	public function getLedger(Request $request, $id) {
		try {
			$startDate = Carbon::now()->startOfYear();
			$endDate = Carbon::now()->endOfYear();


			if ($request->has('date_range') && !empty($request->date_range)) {
				$dateRange = explode(' - ', $request->date_range);
				if (count($dateRange) == 2) {
					$startDate = Carbon::parse($dateRange[0])->startOfDay();
					$endDate = Carbon::parse($dateRange[1])->endOfDay();
				}
			}

			// Get regular sales
			$sells = Sell::with(['payments', 'store'])
				->where('customer_id', $id)
				->whereBetween('sell_date', [$startDate, $endDate])
				->when($request->store_id !== 'all', function ($query) use ($request) {
					return $query->where('store_id', $request->store_id);
				})
				->get();

			// Combine and format transactions for ledger
			$transactions = collect();

			// Add sells to transactions
			foreach ($sells as $sell) {
				// Add sale entry
				$transactions->push([
					'date' => $sell->sell_date,
					'reference_no' => $sell->reference_no,
					'type' => 'Sale',
					'location' => optional($sell->store)->name ?? '-',
					'payment_status' => $sell->payment_status,
					'debit' => $sell->net_total,
					'credit' => 0,
					'payment_method' => '-',
					'others' => "Invoice: $sell->invoice_no"
				]);

				// Add payment entries
				foreach ($sell->payments as $payment) {
					$transactions->push([
						'date' => $payment->paid_on,
						'reference_no' => $payment->transaction_reference ?? '-',
						'type' => 'Payment',
						'location' => optional($sell->store)->name ?? '-',
						'payment_status' => $payment->payment_status,
						'debit' => 0,
						'credit' => $payment->amount,
						'payment_method' => $payment->payment_method,
						'others' => $payment->payment_note ?? ''
					]);
				}
			}

			// Sort transactions by date
			$transactions = $transactions->sortBy('date');

			// Calculate summary
			$summary = [
				'period' => $startDate->format('Y-m-d') . ' - ' . $endDate->format('Y-m-d'),
				'total_invoice' => $transactions->where('type', 'Sale')->sum('debit') +
					$transactions->where('type', 'POS Sale')->sum('debit'),
				'total_paid' => $transactions->sum('credit'),
			];

			// Calculate overall summary (all time)
			$overallQuery = Sell::where('customer_id', $id);

			if ($request->store_id !== 'all') {
				$overallQuery->where('store_id', $request->store_id);
			}

			$overallSells = $overallQuery->sum('net_total');

			// Get sell IDs for payments calculation
			$sellIds = $overallQuery->pluck('id');
			$overallPayments = SellPayment::whereIn('sell_id', $sellIds)->sum('amount');

			$summary['overall_invoice'] = $overallSells;
			$summary['overall_paid'] = $overallPayments;
			$summary['balance_due'] = $summary['overall_invoice'] - $summary['overall_paid'];

			// Get customer details
			$customer = Contact::findOrFail($id);

			$stores = Store::whereStatus(1)->select('id', 'name')->get();

			return response()->json([
				'customer' => [
					'id' => $customer->id,
					'name' => $customer->name,
					'district' => $customer->district,
					'thana' => $customer->thana,
					'post_office' => $customer->post_office,
					'village' => $customer->village,
					'phone' => $customer->phone,
					'business_name' => $customer->business_name ?? '-',
					'image' => $customer->image,
				],
				'transactions' => $transactions->values(),
				'summary' => $summary,
				'stores' => $stores
			]);
		} catch (\Exception $e) {
			return response()->json([
				'error' => true,
				'message' => $e->getMessage()
			], 500);
		}
	}

	public function pay($id) {
		try {
			$customer = Contact::findOrFail($id);

			// Create query for overall sells (similar to getLedger)
			$overallQuery = Sell::where('customer_id', $id);
			$totalSale = $overallQuery->sum('net_total');

			// Get sell IDs for payments calculation
			$sellIds = $overallQuery->pluck('id');
			$totalPaid = SellPayment::whereIn('sell_id', $sellIds)->sum('amount');


			// Calculate total discount
			$totalDiscount = $overallQuery->sum('discount_amount');
			// Calculate total due
			$totalDue = $totalSale - $totalPaid;
			// Make sure opening_balance is properly included
			$openingBalance = $customer->opening_balance ?? 0;

			return response()->json([
				'success' => true,
				'customer_name' => $customer->name,
				'total_sale' => $totalSale,
				'total_paid' => $totalPaid,
				'total_due' => $totalDue,
				'total_discount' => $totalDiscount,
				'opening_balance' => $openingBalance,
				'customer_id' => $customer->id,
			]);
		} catch (\Exception $e) {
			return response()->json([
				'success' => false,
				'message' => 'Error fetching customer payment details',
				'error' => $e->getMessage()
			], 500);
		}
	}

	public function store(Request $request, $id) {
		try {
			// Validate request
			$validated = $request->validate([
				'amount' => 'required|numeric|min:0.01',
				'discount_amount' => 'nullable|numeric|min:0',
				'payment_method' => 'required|in:cash,card,bank_transfer,cheque',
				'paid_on' => 'required|date',
				'payment_account' => 'nullable|exists:payment_accounts,id',
				'payment_note' => 'nullable|string|max:500'
			]);

			DB::beginTransaction();

			// Get customer
			$customer = Contact::findOrFail($id);

			// Amount to be allocated
			$remainingAmount = $validated['amount'];
			$discountAmount = $validated['discount_amount'] ?? 0;

			// Create payment record for customer
			$customerPayment = CustomerPayment::create([
				'customer_id' => $customer->id,
				'amount' => $validated['amount'],
				'discount_amount' => $discountAmount,
				'payment_method' => $validated['payment_method'],
				'paid_on' => $validated['paid_on'],
				'payment_note' => $validated['payment_note'] ?? null,
				'created_by' => auth()->id()
			]);

			// Fetch sells with pending payment, ordered by sell date
			$pendingSells = Sell::where('customer_id', $customer->id)
				->where('payment_due', '>', 0)
				->orderBy('sell_date')
				->get();

			// Prepare array to track sell payments
			$sellPayments = [];
			$remainingDiscount = $discountAmount;

			foreach ($pendingSells as $sell) {
				if ($remainingAmount <= 0 && $remainingDiscount <= 0) {
					break;
				}

				// First apply discount if available
				$discountToApply = min($remainingDiscount, $sell->payment_due);
				if ($discountToApply > 0) {
					$sell->discount_amount = ($sell->discount_amount ?? 0) + $discountToApply;
					$sell->net_total -= $discountToApply;
					$sell->payment_due -= $discountToApply;
					$remainingDiscount -= $discountToApply;

			$this->transactionService->recordExpense(
						$sell->store_id,
						$discountToApply,
						"Discount",
						'Expense for Discount Record for Sell' . $sell->id,
						Auth::id(),
						$sell->id
					);
				}

				// Then apply payment if needed and if there's remaining amount
				$paymentToApply = min($remainingAmount, $sell->payment_due);
				if ($paymentToApply > 0) {
					// Create sell payment record
					$sellPayment = SellPayment::create([
						'sell_id' => $sell->id,
						'amount' => $paymentToApply,
						'paid_on' => $validated['paid_on'],
						'payment_method' => $validated['payment_method'],
						'payment_note' => $validated['payment_note'] ?? null,
						'transaction_reference' => $customerPayment->id
					]);


					// Record payment transaction
					$this->transactionService->recordSale(
						$sell->store_id,
						$paymentToApply,
						'Customer Ledger Payment',
						'Due Payment Record for ' . $sell->id,
						Auth::id(),
						$sell->id
					);

					// Reduce remaining amount
					$remainingAmount -= $paymentToApply;
					$sell->payment_due -= $paymentToApply;

					// Store sell payment for response
					$sellPayments[] = $sellPayment;
				}

				// Update payment status
				if ($sell->payment_due <= 0) {
					$sell->payment_status = 'paid';
				} elseif ($sell->payment_due < $sell->net_total) {
					$sell->payment_status = 'partial';
				}

				$sell->save();
			}

			// Update customer balance
			$customer->update([
				'balance' => DB::raw('balance - ' . ($validated['amount'] + $discountAmount))
			]);


			DB::commit();

			return response()->json([
				'success' => true,
				'message' => 'Payment and discount recorded successfully',
				'data' => [
					'customer_payment' => $customerPayment,
					'sell_payments' => $sellPayments,
					'new_customer_balance' => $customer->fresh()->balance,
					'remaining_unallocated_amount' => max(0, $remainingAmount),
					'remaining_unallocated_discount' => max(0, $remainingDiscount)
				]
			]);

		} catch (\Illuminate\Validation\ValidationException $e) {
			return response()->json([
				'success' => false,
				'message' => 'Validation error',
				'errors' => $e->errors()
			], 422);

		} catch (\Exception $e) {
			DB::rollBack();

			return response()->json([
				'success' => false,
				'message' => 'Error recording payment',
				'error' => $e->getMessage()
			], 500);
		}
	}


	public function downloadLedgerPdf($customerId, Request $request) {
		try {
			$ledgerResponse = $this->getLedger($request, $customerId);
			$ledgerData = $ledgerResponse->getData(true);

			// Extract required data
			$customer = $ledgerData['customer'];
			$transactions = $ledgerData['transactions'];
			$summary = $ledgerData['summary'];
			$dateRange = $summary['period'];

			// Generate PDF
			$pdf = PDF::loadView('admin.contacts.pdfs.customer_ledger', [
				'customer' => $customer,
				'transactions' => $transactions,
				'summary' => $summary,
				'dateRange' => $dateRange
			])->setPaper('a4');

			$filename = "{$customer['name']}_ledger_" . now()->format('Ymd') . '.pdf';

			// Return PDF with proper headers
			return $pdf->download($filename);
		} catch (\Exception $e) {
			Log::error('Ledger PDF Download Error: ' . $e->getMessage());
			return back()->with('error', 'Unable to generate PDF: ' . $e->getMessage());
		}
	}

}
