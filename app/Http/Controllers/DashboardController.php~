<?php

namespace App\Http\Controllers;

use App\Models\AccountTransaction;
use App\Models\Contact;
use App\Models\Expense;
use App\Models\Purchase;
use App\Models\PurchaseReturn;
use App\Models\Sell;
use App\Models\SellPayment;
use App\Models\SellReturn;
use App\Models\Store;
use App\Models\User;
use Carbon\Carbon;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class DashboardController extends Controller
{

    public function dashboard(Request $request)
    {
        // Validate incoming request
        $validated = $request->validate([
            'date_range' => 'nullable|string|in:today,yesterday,last_7_days,last_30_days,this_month,last_month,this_year,last_year,custom,all',
            'store_id' => 'nullable|exists:stores,id',
            'start_date' => 'nullable|date',
            'end_date' => 'nullable|date',
        ]);

        $dateRange = $validated['date_range'] ?? 'today';
        $selectedStoreId = $validated['store_id'] ?? null;

        // Get accessible stores based on user role
        $stores = Auth::user()->hasRole('admin')
            ? Store::latest()->get()
            : Auth::user()->stores;

        // Calculate date range
        [$startDate, $endDate] = $this->calculateDateRange($dateRange, $request);

        // Get statistics
        $statistics = $this->getStatistics($selectedStoreId, $dateRange, $startDate, $endDate);

        if ($request->ajax()) {
            return response()->json([
                'data' => $statistics,
                'dateRange' => $dateRange,
                'startDate' => $startDate?->format('Y-m-d'),
                'endDate' => $endDate?->format('Y-m-d'),
                'selectedStore' => $selectedStoreId
            ]);
        }

        return view('admin.index', [
            'data' => $statistics,
            'stores' => $stores
        ]);
    }

    private function calculateDateRange($dateRange, Request $request)
    {
        $startDate = null;
        $endDate = null;

        switch ($dateRange) {
            case 'today':
                $startDate = now()->startOfDay();
                $endDate = now()->endOfDay();
                break;
            case 'yesterday':
                $startDate = now()->subDay()->startOfDay();
                $endDate = now()->subDay()->endOfDay();
                break;
            case 'last_7_days':
                $startDate = now()->subDays(7)->startOfDay();
                $endDate = now()->endOfDay();
                break;
            case 'last_30_days':
                $startDate = now()->subDays(30)->startOfDay();
                $endDate = now()->endOfDay();
                break;
            case 'this_month':
                $startDate = now()->startOfMonth();
                $endDate = now()->endOfMonth();
                break;
            case 'last_month':
                $startDate = now()->subMonth()->startOfMonth();
                $endDate = now()->subMonth()->endOfMonth();
                break;
            case 'this_year':
                $startDate = now()->startOfYear();
                $endDate = now()->endOfYear();
                break;
            case 'last_year':
                $startDate = now()->subYear()->startOfYear();
                $endDate = now()->subYear()->endOfYear();
                break;
            case 'custom':
                $startDate = $request->input('start_date') ? Carbon::parse($request->input('start_date')) : now()->startOfDay();
                $endDate = $request->input('end_date') ? Carbon::parse($request->input('end_date')) : now()->endOfDay();
                break;
            default:
                $startDate = null;
                $endDate = null;
        }

        return [$startDate, $endDate];
    }


    public function getStatistics($selectedStoreId, $dateRange, $startDate, $endDate)
    {
        try {
            $authUserId = Auth::id();

            // Query builder for date filtering
            $dateFilter = function ($query) use ($dateRange, $startDate, $endDate) {
                return $dateRange !== 'all' ? $query->whereBetween('created_at', [$startDate, $endDate]) : $query;
            };


            // Get total users
            // $totalUsers = User::when($selectedStoreId, function ($query) use ($selectedStoreId) {
            //     return $query->whereHas('stores', function ($q) use ($selectedStoreId) {
            //         $q->where('stores.id', $selectedStoreId);
            //     });
            // })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->count();

            // Get suppliers - Updated to filter by auth user
            // $suppliers = Contact::where('role', '=', 'supplier')
            //     ->where(function ($query) use ($authUserId) {
            //         $query->where('created_by', $authUserId)
            //             ->orWhere('updated_by', $authUserId);
            //     })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->count();

            // Get customers - Updated to filter by auth user
            // $totalCustomers = Contact::where('role', '=', 'customer')
            //     ->where(function ($query) use ($authUserId) {
            //         $query->where('created_by', $authUserId)
            //             ->orWhere('updated_by', $authUserId);
            //     })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->count();

            // Get purchases
            // $totalPurchases = Purchase::when($selectedStoreId, function ($query) use ($selectedStoreId) {
            //     return $query->where('store_id', $selectedStoreId);
            // })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->sum('net_total');

            // // Get purchase due
            // $totalPurchaseDue = Purchase::when($selectedStoreId, function ($query) use ($selectedStoreId) {
            //     return $query->where('store_id', $selectedStoreId);
            // })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->sum('payment_due');

            // // Get Purchase Returns
            // $totalPurchaseReturns = PurchaseReturn::when($selectedStoreId, function ($query) use ($selectedStoreId) {
            //     return $query->whereHas('purchase', function ($q) use ($selectedStoreId) {
            //         $q->where('store_id', $selectedStoreId);
            //     });
            // })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->sum('total_return_amount');

            // // Get Sell Returns
            // $totalSellReturns = SellReturn::when($selectedStoreId, function ($query) use ($selectedStoreId) {
            //     return $query->whereHas('sell', function ($q) use ($selectedStoreId) {
            //         $q->where('store_id', $selectedStoreId);
            //     });
            // })
            //     ->when($dateRange !== 'all', $dateFilter)
            //     ->sum('total_return_amount');

            // Get Sales
            $totalSales = Sell::with('payments')->when($selectedStoreId, function ($query) use ($selectedStoreId) {
                return $query->where('store_id', $selectedStoreId);
            })->when($dateRange !== 'all', $dateFilter)
                ->sum('net_total');


			$totalPayments = SellPayment::when($selectedStoreId, function ($query) use ($selectedStoreId) {
				return $query->whereHas('sell', function ($q) use ($selectedStoreId) {
					$q->where('store_id', $selectedStoreId);
				});
			})
				->when($dateRange !== 'all', function ($query) use ($dateFilter) {
					// Apply the date filter to payment_date instead of sell date
					return $dateFilter($query, 'payment_date');
				})
				->sum('amount');
            // Get sales due
            $totalSalesDue = Sell::with('payments')->when($selectedStoreId, function ($query) use ($selectedStoreId) {
                return $query->where('store_id', $selectedStoreId);
            })->when($dateRange !== 'all', $dateFilter)
                ->sum('payment_due');

            // Get Expense
            $totalExpense = Expense::when($selectedStoreId, function ($query) use ($selectedStoreId) {
                return $query->where('store_id', $selectedStoreId);
            })->when($dateRange !== 'all', $dateFilter)
                ->sum('total_amount');
            // Get Due Expense


            // $totalNetProfit = $totalPurchases - $totalPurchaseDue - $totalPurchaseReturns - $totalSellReturns - $totalSales - $totalSalesDue - $totalExpense;

            $totalCashInHand = $totalPayments - $totalSalesDue - $totalExpense;
          
            $bankDeposite=AccountTransaction::when($selectedStoreId, function ($query) use ($selectedStoreId) {
				return $query->where('store_id', $selectedStoreId);
			})->when($dateRange !== 'all', $dateFilter)
				->where('transaction_type','withdrawal')
				->sum('amount');


            return [
                // [
                //     'title' => 'Total Users',
                //     'count' => $totalUsers,
                //     'icon' => 'bx-group',
                //     'color' => 'bg-gradient-blues'
                // ],
                // [
                //     'title' => 'Total Suppliers',
                //     'count' => $suppliers,
                //     'icon' => 'bx-store',
                //     'color' => 'bg-gradient-cosmic'
                // ],
                // [
                //     'title' => 'Total Customers',
                //     'count' => $totalCustomers,
                //     'icon' => 'bx-user-circle',
                //     'color' => 'bg-gradient-ohhappiness'
                // ],
                // [
                //     'title' => 'Total Purchases',
                //     'count' => number_format($totalPurchases, 2),
                //     'icon' => 'bx-cart',
                //     'color' => 'bg-gradient-kyoto'
                // ],
                // [
                //     'title' => 'Total Purchase Due',
                //     'count' => number_format($totalPurchaseDue, 2),
                //     'icon' => 'bx-money',
                //     'color' => 'bg-gradient-burning'
                // ],
                // [
                //     'title' => 'Total Purchase Returns',
                //     'count' => number_format($totalPurchaseReturns, 2),
                //     'icon' => 'bx-undo',
                //     'color' => 'bg-gradient-ohhappiness'
                // ],
                // [
                //     'title' => 'Total Sell Returns',
                //     'count' => number_format($totalSellReturns, 2),
                //     'icon' => 'bx-x-circle',
                //     'color' => 'bg-gradient-blues'
                // ],
                [
                    'title' => 'Total Sales',
                    'count' => number_format($totalSales, 2),
                    'icon' => 'bx-cart',
                    'color' => 'bg-gradient-kyoto'
                ],
                [
                    'title' => 'Total Sales Due',
                    'count' => number_format($totalSalesDue, 2),
                    'icon' => 'bx-money',
                    'color' => 'bg-gradient-burning'
                ],
                [
                    'title' => 'Total Expense',
                    'count' => number_format($totalExpense, 2),
                    'icon' => 'bx-money',
                    'color' => 'bg-gradient-burning'
                ],
                // [
                //     'title' => 'Total Net Profit',
                //     'count' => number_format($totalNetProfit, 2),
                //     'icon' => 'bx-line-chart',
                //     'color' => 'bg-gradient-kyoto'
                // ],
                [
                    'title' => 'Total Cash In Hand',
                    'count' => number_format($totalCashInHand, 2),
                    'icon' => 'bx-line-chart',
                    'color' => 'bg-gradient-kyoto'
                ],
              
                [
                    'title' => 'Total Bank Deposite',
                    'count' => number_format($bankDeposite, 2),
                    'icon' => 'bx-line-chart',
                    'color' => 'bg-gradient-kyoto'
                ],

            ];
        } catch (Exception $e) {
            Log::error('Dashboard Statistics Error: ' . $e->getMessage());
            return [
                ['title' => 'Total Users', 'count' => 0, 'icon' => 'bx-group', 'color' => 'bg-gradient-blues'],
                ['title' => 'Total Suppliers', 'count' => 0, 'icon' => 'bx-store', 'color' => 'bg-gradient-cosmic'],
                ['title' => 'Total Customers', 'count' => 0, 'icon' => 'bx-user-circle', 'color' => 'bg-gradient-ohhappiness'],
                [
                    'title' => 'Total Purchase Returns',
                    'count' => '0.00',
                    'icon' => 'bx-undo',
                    'color' => 'bg-gradient-ohhappiness'
                ],
                [
                    'title' => 'Total Sell Returns',
                    'count' => '0.00',
                    'icon' => 'bx-x-circle',
                    'color' => 'bg-gradient-blues'
                ]
            ];
        }
    }
}
