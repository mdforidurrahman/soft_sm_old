<?php

namespace App\Http\Controllers;

use App\Models\AccountTransaction;
use App\Models\BankAccount;
use App\Models\Store;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Yajra\DataTables\DataTables;

class AccountTransactionController extends Controller
{
	/**
	 * Display a listing of the resource.
	 */
	public function index() {
		if (Auth::User()->hasRole('admin')) {
			$stores = Store::latest()->get();
		} else {
			$stores = Auth::User()->stores;
		}

		if (request()->ajax()) {
			$data = AccountTransaction::with(['store', 'account', 'createdBy'])->latest();

			return DataTables::of($data)
				->addIndexColumn()
				->addColumn('store', function ($row) {
					return $row->store->name;
				})
				->addColumn('transaction_type', function ($row) {
					return ucfirst($row->transaction_type);
				})
				->addColumn('amount', function ($row) {
					return number_format($row->amount, 2);
				})
				->addColumn('created_by', function ($row) {
					return $row->createdBy->name;
				})
				->addColumn('transaction_date', function ($row) {
					return $row->transaction_date;
				})
				->addColumn('action', function ($row) {
					return view('components.action-buttons', [
						'id' => $row->id,
						'model' => 'accountTransaction',
						'editModal' => 'editModal',
						'editModalRoute' => 'account-transactions.edit',
						'deleteRoute' => 'account-transactions.destroy',
					])->render();
				})
				->rawColumns(['action'])
				->make(true);
		}

		return view('admin.account-transactions.index', compact('stores'));
	}

	/**
	 * Show the form for creating a new resource.
	 */
	public function create() {
		//
	}

	/**
	 * Store a newly created resource in storage.
	 */
	public function store(Request $request) {
		try {
			$request->validate([
				'store_id' => 'required|exists:stores,id',
				'bank_name' => 'required|string|max:255',
				'account_holder_name' => 'required|string|max:255',
				'account_number' => 'required|string|max:255|unique:bank_accounts,account_number',
				'current_balance' => 'required|numeric|min:0',
			]);

			DB::beginTransaction();

			$data = BankAccount::create($request->all());
			DB::commit();

			return $this->success(['id' => $data->id], 'Bank Account created successfully');
		} catch (\Exception $e) {
			DB::rollBack();

			return $this->error('Something Went Wrong : ', $e->getMessage(), 500);
		}
	}

	/**
	 * Display the specified resource.
	 */
	public function show(string $id) {
		//
	}

	/**
	 * Show the form for editing the specified resource.
	 */
	public function edit(string $id) {
		$store = BankAccount::findOrFail($id);
		return response()->json($store);
	}

	/**
	 * Update the specified resource in storage.
	 */
	public function update(Request $request, string $id) {
		try {
			$request->validate([
				'store_id' => 'required|exists:stores,id',
				'bank_name' => 'required|string|max:255',
				'account_holder_name' => 'required|string|max:255',
				'account_number' => 'required|string|max:255|unique:bank_accounts,account_number,' . $id,
				'current_balance' => 'required|numeric|min:0',
			]);

			$bank = BankAccount::findOrFail($id);
			$bank->update($request->all());
			DB::commit();

			return $this->success(['id' => $bank->id], 'Bank Updated successfully');
		} catch (\Exception $exception) {
			return $this->error('Something went wrong' . $exception->getMessage());
		}
	}

	/**
	 * Remove the specified resource from storage.
	 */
	public function destroy(string $id) {
		try {
			$bank = BankAccount::findOrFail($id);
			DB::beginTransaction();

			$bank->delete();

			DB::commit();
			return response()->json([
				'success' => true,
				'message' => 'Bank deleted successfully'
			]);
		} catch (\Exception $exception) {
			return $this->error('Something went wrong' . $exception->getMessage());
		}
	}
}
